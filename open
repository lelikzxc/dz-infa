# функция, которая проверяет, есть ли в строке 3 и больше U подряд
def has_three_U(s):
  count = 0 # счетчик подряд идущих U
  for c in s: # для каждого символа в строке
    if c == 'U': # если символ U
      count += 1 # увеличить счетчик на 1
      if count >= 3: # если счетчик достиг 3 или больше
        return True # вернуть True
    else: # если символ не U
      count = 0 # обнулить счетчик
  return False # вернуть False, если не нашли 3 и больше U подряд

# функция, которая генерирует все комбинации символов U и L длины n
def generate_combinations(n):
  if n == 0: # если n равно 0
    return [''] # вернуть список с пустой строкой
  else: # если n больше 0
    result = [] # создать пустой список для результата
    for c in ['U', 'L']: # для каждого символа U и L
      for s in generate_combinations(n-1): # для каждой комбинации длины n-1
        result.append(c + s) # добавить к результату комбинацию с текущим символом
    return result # вернуть список всех комбинаций

# функция, которая определяет количество комбинаций символов U и L, в которых встречается 3 и больше U подряд
def count_combinations(n):
  count = 0 # счетчик для количества комбинаций
  for s in generate_combinations(n): # для каждой комбинации длины n
    if has_three_U(s): # если в комбинации есть 3 и больше U подряд
      count += 1 # увеличить счетчик на 1
  return count # вернуть счетчик

# главная часть программы
n = int(input('Введите длину комбинации (не больше 30): ')) # ввести длину комбинации
if n > 30: # если длина больше 30
  print('Слишком большая длина, попробуйте меньше') # вывести сообщение об ошибке
else: # если длина не больше 30
  print('Количество комбинаций символов U и L длины', n, 'в которых встречается 3 и больше U подряд:', count_combinations(n)) # вывести количество комбинаций
